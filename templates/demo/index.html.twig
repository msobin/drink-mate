{# templates/demo/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Test DrinkingMate API client{% endblock %}
{% block stylesheets %}
    <script type="importmap">
        {
          "imports": {
            "vue": "https://unpkg.com/vue@3/dist/vue.esm-browser.js"
          }
        }
    </script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.2/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet@1.9.2/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js"></script>
    <style>
        #map {
            position: relative;
            height: 100vh;
            width: 100%;
        }
    </style>
{% endblock %}
{% block content %}
    <div id="app" class="container">
        <div class="row align-items-start flex-fill">
            <div class="col-2">
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input type="text" class="form-control" placeholder="" v-model="me.name">
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <input type="text" class="form-control" placeholder="" v-model="me.description">
                </div>
                <div class="mb-3">
                    <label class="form-label">Latitude</label>
                    <input type="text" class="form-control" placeholder="" v-model="me.latitude">
                </div>
                <div class="mb-3">
                    <label class="form-label">Longitude</label>
                    <input type="text" class="form-control" placeholder="" v-model="me.longitude">
                </div>
                <button type="submit" class="btn btn-primary mb-3" :disabled="isWannaDrinkDisabled" @click="wannaDrink">
                    Wanna drink!
                </button>
            </div>
            <div class="col-10 vh-100">
                <div id="map"></div>
            </div>
        </div>
    </div>
    <script type="module">
        import {createApp} from 'vue';

        const app = createApp({
            data() {
                return {
                    isWannaDrinkDisabled: false,
                    me: {
                        name: 'test',
                        description: "description",
                        latitude: 51.14607,
                        longitude: 71.420922,
                    },
                    token: '',
                    marker: null,
                    map: null,
                    matesMarkers: {},
                }
            },
            mounted() {
                this.initMap();
            },
            methods: {
                async wannaDrink() {
                    const response = await axios.post('/api/v1/wanna-drink', this.me)
                        .catch(function (error) {
                            console.log(error);
                        })

                    this.token = response.data.token;
                    axios.defaults.headers.common = {'Authorization': `Bearer ${this.token}`}
                    this.isWannaDrinkDisabled = true;
                    this.map.off('click');

                    await this.findNearBy();

                    setInterval(() => {
                        this.findNearBy();
                    }, 5000)
                },
                async findNearBy() {
                    const response = await axios.get('http://localhost:82/api/v1/mates/nearby',)
                        .catch(function (error) {
                            console.log(error);
                        })

                    response.data.forEach((mate) => {
                        if (this.matesMarkers[mate.id]) {
                            return;
                        }

                        this.matesMarkers[mate.id] = new L.marker([mate.point.latitude, mate.point.longitude], {icon: this.getIcon()})
                            .addTo(this.map)
                            .bindPopup(mate.name + '<br>' + mate.description);
                    })

                    let mateIds = response.data.map((mate) => mate.id);
                    for (let mateId in this.matesMarkers) {
                        if (!mateIds.includes(mateId)) {
                            this.map.removeLayer(this.matesMarkers[mateId]);
                            delete this.matesMarkers[mateId];
                        }
                    }
                },
                initMap() {
                    let config = {
                        minZoom: 7,
                        maxZoom: 18,
                    };

                    const zoom = 16;
                    const lat = 51.14607;
                    const lng = 71.420922;

                    this.map = L.map("map", config).setView([lat, lng], zoom);

                    L.tileLayer(
                        "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
                        {
                            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                        }
                    ).addTo(this.map);

                    this.map.on('click', (e) => {
                        this.me.latitude = e.latlng.lat;
                        this.me.longitude = e.latlng.lng;

                        if (this.marker) {
                            this.map.removeLayer(this.marker);
                        }

                        this.marker = new L.marker(e.latlng, {icon: this.getIcon('red')}).addTo(this.map).bindPopup('me');
                    });
                },
                getIcon(color) {
                    let colors = ['blue', 'gold', 'green', 'orange', 'yellow', 'violet', 'grey', 'black'];

                    if (color === undefined) {
                        color = colors[Math.floor(Math.random() * colors.length)];
                    }

                    return new L.Icon({
                        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-' + color + '.png',
                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                        iconSize: [25, 41],
                        iconAnchor: [12, 41],
                        popupAnchor: [1, -34],
                        shadowSize: [41, 41]
                    });
                }
            },
            watch: {
                me: {
                    deep: true,
                    handler() {
                        this.isWannaDrinkDisabled = !(this.me.name && this.me.latitude && this.me.longitude && !this.me.token)
                    },
                }
            },
        })

        app.mount('#app')
    </script>
{% endblock %}
